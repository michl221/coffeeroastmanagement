@page "/contact_old"
@inject HttpClient client
@inject IJSRuntime js
<h3>Contacts</h3>
<small>Information on buying green beans.</small>
<div class="form-group">
    <a class="btn btn-success" href="contact/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>
@if (contacts == null)
{
    <text>Loading...</text>
}
else if (contacts.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Url</th>
                <th>Note</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Contact con in contacts)
            {
                <tr>
                    <td>@con.Id</td>
                    <td>@con.Name</td>
                    <td>@con.Url</td>
                    <td>@con.Note</td>
                    <td>
                        <a class="btn btn-success" href="contact/edit/@con.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(con.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    Contact[] contacts { get; set; }
    protected override async Task OnInitializedAsync()
    {
        contacts = await client.GetFromJsonAsync<Contact[]>("api/contact");
    }
    async Task Delete(int contactId)
    {
        var con = contacts.First(x => x.Id == contactId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {con.Name}'s ({con.Id}) Record?"))
        {
            await client.DeleteAsync($"api/contact/{contactId}");
            await OnInitializedAsync();
        }
    }
}