@page "/contact"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackbar

<h3>Contacts Management</h3>

<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@ToggleShowInputDialog"></MudIconButton>
@if (showInputDialog)
{
    <ContactForm ButtonText="@ButtonAction" contact="contact" OnValidSubmit="@Save" />
}

<MudTable Elevation="25" Items="contacts" Filter="new Func<Contact, bool>(Search)" @bind-contact="contact">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Contacts</MudText>
        @*<MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Contacts..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>*@
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Country</MudTh>
        <MudTh>Note</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name"><MudLink Href="@context.Url" Underline="Underline.Always">@context.Name</MudLink></MudTd>
        <MudTd DataLabel="Country">@context.Country</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code { 
    private bool showInputDialog = false;
    private string ButtonAction = "Create";
    private string searchString = "";
    private Contact contact = new Contact();
    private List<Contact> contacts = new List<Contact>();
    private List<byte[]> icons = new List<byte[]>();
    private bool edit = false;

    private void ToggleShowInputDialog()
    {
        if (edit && showInputDialog)
        {
            contact = new Contact();
            edit = false;
            ButtonAction = "Create";
            StateHasChanged();
            return;
        }
        showInputDialog = !showInputDialog;
    }
    private void ShowInputDialog()
    {
        showInputDialog = true;
    }

    private List<Contact> AllContacts()
    {
        return contacts;
    }

    private async void GetContacts()
    {
        var c = await http.GetFromJsonAsync<Contact[]>("api/contact");
        contacts.Clear();
        contacts.AddRange(c);

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var c = await http.GetFromJsonAsync<Contact[]>("api/contact");
        contacts = new List<Contact>();
        contacts.AddRange(c);
    }

    private bool Search(Contact contact)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (contact.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private async void Save()
    {
        if (contact.Id == 0)
        {
            await http.PostAsJsonAsync("api/contact", contact);
            snackbar.Add("Contact saved.", Severity.Success);
        }
        else
        {
            await http.PutAsJsonAsync("api/contact", contact);
            snackbar.Add("Contact updated.", Severity.Success);

        }
        contact = new Contact();
        showInputDialog = false;
        edit = false;
        ButtonAction = "Create";
        GetContacts();
        StateHasChanged();
    }

    private async void Edit(int id)
    {
        ShowInputDialog();
        ButtonAction = "Update";
        edit = true;
        contact = await http.GetFromJsonAsync<Contact>($"api/contact/{id}");
        StateHasChanged();
    }

    private async void Delete(int id)
    {
        showInputDialog = false;
        edit = false;
        contact = new Contact();
        await http.DeleteAsync($"api/contact/{id}");
        snackbar.Add("Contact deleted.", Severity.Success);
        GetContacts();
    }
}