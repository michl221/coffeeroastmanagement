@page "/contact"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackbar
@inject IDispatcher Dispatcher
@inject IState<ContactsState> ContactsState 

@using CoffeeRoastManagement.Client.Store.State
@using CoffeeRoastManagement.Client.Store.Features.EditContact.Actions 
 
@inherits FluxorComponent

<h3>Contacts Management</h3>

<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@ClickAddButton"></MudIconButton>
@if (showInputDialog)
{
    <ContactForm ButtonText="@ButtonAction" contact="contact" OnValidSubmit="@Save" />
}

<MudTable Elevation="25" Items="contacts"> @* @bind-contact="contact"> *@
    <ToolBarContent>
        <MudText Typo="Typo.h6">Contacts</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Country</MudTh>
        <MudTh>Note</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name"><MudLink Href="@context.Url" Underline="Underline.Always">@context.Name</MudLink></MudTd>
        <MudTd DataLabel="Country">@context.Country</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code { 
    private bool showInputDialog => ContactsState.Value.ShowInputDialog;
    private string ButtonAction => ContactsState.Value.ContactButtonText;

    private Contact contact => ContactsState.Value.CurrentContact;

    private Contact[] contacts => ContactsState.Value.Contacts;
    private bool loading => ContactsState.Value.Loading;

    private bool edit => ContactsState.Value.ContactEditMode;

    private void ClickAddButton()
    {
        Dispatcher.Dispatch(new ContactAddAction());
    }

    private void LoadContacts()
    {
        Dispatcher.Dispatch(new ContactsLoadAction());
    }

    protected void OnInitialized()
    {
        SubscribeToAction<ContactDeleteSuccessAction>((action) => snackbar.Add("Contact deleted.", Severity.Success));
        SubscribeToAction<ContactDeleteFailureAction>((action) => snackbar.Add($"Contact delete failed: {action.ErrorMessage}.", Severity.Error));
        SubscribeToAction<ContactCreateSuccessAction>((action) => snackbar.Add("Contact created successfully.", Severity.Success));
        SubscribeToAction<ContactCreateFailureAction>((action) => snackbar.Add($"Contact not created: {action.ErrorMessage}.", Severity.Error));
        SubscribeToAction<ContactUpdateSuccessAction>((action) => snackbar.Add("Contact updated successfully.", Severity.Success));
        SubscribeToAction<ContactUpdateFailureAction>((action) => snackbar.Add($"Contact update failed: {action.ErrorMessage}.", Severity.Error));

        if (!ContactsState.Value.Initialized)
        {
            LoadContacts();
            Dispatcher.Dispatch(new ContactsInitializedAction());
        }
        base.OnInitialized();
    }

    private void Save()
    {
        Dispatcher.Dispatch(new ContactsSaveAction(contact));
    }

    private void Edit(Contact cont)
    {
        Dispatcher.Dispatch(new ContactEditAction(cont));
    }

    private void Delete(Contact cont)
    {
        Dispatcher.Dispatch(new ContactsDeleteAction(cont));
    }
}