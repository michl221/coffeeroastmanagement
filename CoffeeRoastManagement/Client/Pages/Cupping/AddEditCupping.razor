@page "/cupping"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackbar

<h3>Contacts</h3>

<MudCard Elevation="25">
	<MudCardHeader>
		<CardHeaderContent>
			<MudText Typo="Typo.h6">Add / Edit Cuppings</MudText>
		</CardHeaderContent>
	</MudCardHeader>
	<MudCardContent>
		<MudTextField @bind-Value="cupping.Date" Label="Date" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
		<MudTextField @bind-Value="cupping.Note" Label="Note" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Contact</MudButton>
	</MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="cuppings" Filter="new Func<Cupping, bool>(Search)" @bind-contact="cupping">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Cuppings</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Cuppings..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Date</MudTh>
        <MudTh>Notes</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Date</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
	private string searchString = "";
	private Cupping cupping = new Cupping();
	private List<Cupping> cuppings = new List<Cupping>();

	private async void GetCuppings() {
		var c = await http.GetFromJsonAsync<Cupping[]>("api/cupping");
		cuppings.Clear(); 
		cuppings.AddRange(c);
		StateHasChanged();
	}
	
	protected override async Task OnInitializedAsync() 
	{
		var c = await http.GetFromJsonAsync<Cupping[]>("api/cupping");
		cuppings.Clear();
		cuppings.AddRange(c);
	}

	private bool Search(Cupping cupping)
	{
		if (string.IsNullOrWhiteSpace(searchString)) return true;
		if (cupping.Note.Contains(searchString, StringComparison.OrdinalIgnoreCase)) {
			return true;
		}
		return false;
	}

	private async void Save() 
	{
		if (cupping.Id == 0) {
			await http.PostAsJsonAsync("api/cupping", cupping);
			snackbar.Add("Cupping saved.", Severity.Success);
		}else {
			await http.PutAsJsonAsync("api/cupping", cupping);
			snackbar.Add("Cupping updated.", Severity.Success);
		
		}
		GetCuppings();
	}

	private async void Edit(int id) 
	{
		cupping = await http.GetFromJsonAsync<Cupping>($"api/cupping/{id}");
	}

	private async void Delete(int id)
	{
		await http.DeleteAsync($"api/cupping/{id}");
		snackbar.Add("Cupping deleted.", Severity.Success);
		GetCuppings();
	}
}