@page "/roast"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackbar
@inject IDispatcher Dispatcher
@inject IState<RoastsState> RoastsState
@inject IState<GreenBeansState> GreenBeansState

@using System.IO
@using CoffeeRoastManagement.Client.Pages.GreenBlend

@using CoffeeRoastManagement.Client.Store.State
@using CoffeeRoastManagement.Client.Pages.GreenBeanInfo
@using CoffeeRoastManagement.Client.Store.Features.EditRoast.Actions
@using CoffeeRoastManagement.Client.Store.Features.EditStock.Actions

@inherits FluxorComponent

<h3>Roast Management</h3>

<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@ClickAddButton"></MudIconButton>

@if (showInputDialog)
{
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Roast</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField Value="Name" Label="Name" Variant="Variant.Text" Margin="Margin.Normal" TextChanged="@NameChanged"></MudTextField>
        <MudTextField Value="ShortInfo" Label="ShortInfo" Variant="Variant.Text" Margin="Margin.Normal" TextChanged="@ShortInfoChanged"></MudTextField>
        <MudText>Green bean for roast</MudText>
        <GreenBlendCreator AvailableBeans="@stocks" CurrentSelection="@CurrentBeanSelection" SelectedBeans="@greenblends"></GreenBlendCreator>
        <MudTextField Value="Date" Label="Date" Variant="Variant.Text" Margin="Margin.Normal" TextChanged="@DateChanged"></MudTextField>
        <MudTextField Value="Time" Label="Time" Variant="Variant.Text" Margin="Margin.Normal" TextChanged="@TimeChanged"></MudTextField>
        <MudTextField Value="Equipment" Label="Equipment" Variant="Variant.Text" Margin="Margin.Normal" TextChanged="@EquipmentChanged"></MudTextField>
        <!-- Cupping info selection -->
        @*<MudSelect Label="Cupping" @bind-Value="cuppingId">
                @foreach (Cupping c in cuppings)
                {
                    <MudSelectItem T="int?" Value="@c.Id">@(c.Date + ", " + c.Note)</MudSelectItem>
                }
            </MudSelect>*@
        <MudTextField Value="Note" Label="Notes" Variant="Variant.Text" Margin="Margin.Normal" TextChanged="@NoteChanged"></MudTextField>


        <InputFile id="fileInput112" OnChange="UploadProfile" hidden />
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Filled.CloudUpload"
                   for="fileInput112">
            Upload Artisan roast profile
        </MudButton>
        <br />

        <InputFile id="fileInputPhoto" OnChange="UploadPhoto" hidden />
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Filled.CloudUpload"
                   for="fileInputPhoto">
            Upload photo
        </MudButton>

        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Roast</MudButton>
    </MudCardContent>
</MudCard>
                <br /> } @*<MudTable Elevation="25" Items="roasts" Filter="new Func<Roast, bool>(Search)" @bind-contact="roast">*@
<MudTable Elevation="25" Items="roasts">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Roasts</MudText>
        @*<MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search for Roasts..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>*@
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Notes</MudTh>
        <!-- <MudTh>RoastProfile</MudTh> -->
    </HeaderContent>
    <RowTemplate>
        @*<MudTd DataLabel="Name"><MudLink Href="roast/detail/{context.Id}" Underline="Underline.Always">@context.Name</MudLink></MudTd>*@
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Date">@context.Date</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
        <!-- <MudTh DataLabel="RoastProfile">@context.RoastProfile</MudTh> -->
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => Details(@context))" Color="Color.Primary" Icon="@Icons.Material.Filled.ZoomIn" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(() => Edit(@context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(() => Delete(@context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>


@code { 
    private bool showInputDialog => RoastsState.Value.ShowInputDialog;
    private bool edit => RoastsState.Value.RoastEditMode;

    private Roast roast => RoastsState.Value.CurrentRoast;
    private Roast[] roasts => RoastsState.Value.Roasts;

    private Stock[] stocks => RoastsState.Value.Stocks;

    private GreenBlend[] greenblends => RoastsState.Value.GreenBlends;

    private string Name => RoastsState.Value.Name;
    private string ShortInfo => RoastsState.Value.ShortInfo;
    private string Note => RoastsState.Value.Note;
    private DateTime? Date => RoastsState.Value.Date;
    private TimeSpan? Time => RoastsState.Value.Time;
    private string Equipment => RoastsState.Value.Equipment;

    private void ClickAddButton()
    {
        Dispatcher.Dispatch(new RoastsAddAction());
    }

    private string GenerateLink(int id)
    {
        return $"roast/detail/{id}";
    }

    private void LoadData()
    {
        Dispatcher.Dispatch(new RoastsLoadAction());
    }

    protected override void OnInitialized()
    {
        //SubscribeToAction<ContactDeleteSuccessAction>((action) => snackbar.Add("Contact deleted.", Severity.Success));
        //SubscribeToAction<ContactDeleteFailureAction>((action) => snackbar.Add($"Contact delete failed: {action.ErrorMessage}.", Severity.Error));
        //SubscribeToAction<ContactCreateSuccessAction>((action) => snackbar.Add("Contact created successfully.", Severity.Success));
        //SubscribeToAction<ContactCreateFailureAction>((action) => snackbar.Add($"Contact not created: {action.ErrorMessage}.", Severity.Error));
        //SubscribeToAction<ContactUpdateSuccessAction>((action) => snackbar.Add("Contact updated successfully.", Severity.Success));
        //SubscribeToAction<ContactUpdateFailureAction>((action) => snackbar.Add($"Contact update failed: {action.ErrorMessage}.", Severity.Error));

        if (!RoastsState.Value.Initialized)
        {
            LoadData();
            Dispatcher.Dispatch(new RoastsInitializedAction());
        }
        base.OnInitialized();
    }

    private void Save()
    {
        var nRoast = new Roast()
        {
            Id = roast.Id,
            Name = Name,
            ShortInfo = ShortInfo,
            Note = Note,
            Equipment = Equipment,
            Beans = new List<GreenBlend>(greenblends),
            Date = Date == null ? DateTime.MinValue : Date.Value.Add(Time.Value),
            CuppingInfo = new CoffeeRoastManagement.Shared.Entities.Cupping(),
            Photo = RoastsState.Value.Photo,
            RoastProfile = RoastsState.Value.RoastProfile
        };
        Dispatcher.Dispatch(new RoastsSaveRoastAction(nRoast));
    }

    private void Edit(Roast roast)
    {
        Dispatcher.Dispatch(new RoastsRoastEditAction(roast));
    }

    private void Delete(Roast roast)
    {
        Dispatcher.Dispatch(new RoastsRoastDeleteAction(roast));
    }

    private async void UploadProfile(InputFileChangeEventArgs e)
    {
        //var entries = e.GetMultipleFiles();
        IBrowserFile file = e.File;
        //Do your validations here
        snackbar.Add($"Uploading {file.Name}.");
        using var reader =
              new StreamReader(file.OpenReadStream(1024 * 1024 * 1024));

        string roastProfile = await reader.ReadToEndAsync();
        Dispatcher.Dispatch(new RoastsRoastProfileChangeAction(roastProfile));
        Dispatcher.Dispatch(new RoastsUpdateFieldsAction(roastProfile));
    }

    private async void UploadPhoto(InputFileChangeEventArgs e)
    {
        var file = e.File;
        snackbar.Add($"Uploading {file.Name}.");
        var buffers = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffers);
        string photo = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffers)}";
        Dispatcher.Dispatch(new RoastsPhotoChangeAction(photo));
    }

    private void Details(Roast roast)
    {
        uriHelper.NavigateTo($"roast/detail/{roast.Id}");
    }

    public void CurrentBeanSelection(GreenBlend[] blends)
    {
        Dispatcher.Dispatch(new RoastsSetGreenBlendAction(blends));
    }

    private void NameChanged(string text)
    {
        Dispatcher.Dispatch(new RoastNameChangeAction(text));
    }

    private void ShortInfoChanged(string text)
    {
        Dispatcher.Dispatch(new RoastShortInfoChangeAction(text));

    }

    private void EquipmentChanged(string text)
    {
        Dispatcher.Dispatch(new RoastEquipmentChangeAction(text));
    }

    private void NoteChanged(string text)
    {
        Dispatcher.Dispatch(new RoastNoteChangeAction(text));
    }

    private void DateChanged(string text)
    {
        DateTime d = string.IsNullOrEmpty(text) ? DateTime.MinValue : DateTime.Parse(text);
        Dispatcher.Dispatch(new RoastsDateChangeAction(d));
    }

    private void TimeChanged(string text)
    {
        TimeSpan s = string.IsNullOrEmpty(text) ? TimeSpan.Zero : TimeSpan.Parse(text);
        Dispatcher.Dispatch(new RoastsTimeChangeAction(s));
    }
}