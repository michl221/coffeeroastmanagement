@page "/stock"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackbar
@inject IDispatcher Dispatcher
@inject IState<StocksState> StocksState
@inject IState<ContactsState> ContactsState
@inject IState<GreenBeansState> GreenBeansState

@using CoffeeRoastManagement.Client.Store.State
@using CoffeeRoastManagement.Client.Store.Features.EditStock.Actions
@using CoffeeRoastManagement.Client.Store.Features.EditContact.Actions 
@using CoffeeRoastManagement.Client.Store.Features.EditGreenBean.Actions 
@using CoffeeRoastManagement.Client.Pages.GreenBeanInfo

@inherits FluxorComponent


<h3>Stock Management</h3>

<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@ClickAddButton"></MudIconButton>

@if (showInputDialog)
{
@if (!beanloading)
{
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">Select green bean</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <SelectGreenBeanOrCreateNew GreenBeanInfos="@greenbeaninfos" SelectedGreenBean="@selectedGreenBean" SelectionChangeCallback="@BeanSelectionChanged" SaveGreenBeanInfo="@SaveGreenBean" ShowCreateButton="false"></SelectGreenBeanOrCreateNew>
    </MudCardContent>
</MudCard> }
else
{
<p>Loading...</p>}
                <MudCard Elevation="25">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4">Add stock information</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="4">
                                <MudTextField @bind-Value="stock.Amount" Label="Amount" Variant="Variant.Text" Margin="Margin.Normal" Adornment="Adornment.End" AdornmentText="kg"></MudTextField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="4">
                                <MudTextField @bind-Value="stock.OverallPrice" Label="OverallPrcice" Variant="Variant.Text" Margin="Margin.Normal" Adornment="Adornment.Start" AdornmentText="@System.Globalization.NumberFormatInfo.CurrentInfo.CurrencySymbol"></MudTextField>
                            </MudItem>
                            @*<MudItem xs="12" sm="6" md="4">
                                    <MudText>@(stock.Amount != 0 ? (stock.OverallPrice / stock.Amount).ToString("N2") : "-") @System.Globalization.NumberFormatInfo.CurrentInfo.CurrencySymbol / kg</MudText>
                                </MudItem>*@
                        <MudItem xs="12" sm="6" md="4">
                            @*<MudSelect T="Contact" Label="Seller" @bind-Value="selectedContact" ToStringFunc="@converter" Required="true">*@
                            <MudSelect T="Contact" Label="Seller" Value="selectedContact" ValueChanged="ContactChanged" ToStringFunc="@converter" Required="true">
                                @foreach (Contact contact in contacts)
                                {
                                    <MudSelectItem Value="@contact" ></MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                            <MudItem xs="12" sm="6" md="4">
                                <MudTextField @bind-Value="stock.GoodsReceived" Label="Received" Margin="Margin.Normal"></MudTextField>
                            </MudItem>
                            <br />
                        </MudGrid>

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save Stock</MudButton>
                        <MudText Color="Color.Error">@ErrorText</MudText>
                    </MudCardContent>
                </MudCard>}
<br />
<h4>Stock Overview</h4>

@*<MudTable Elevation="25" Items="stocks" Filter="new Func<Stock, bool>(Search)" @bind-contact="stock">*@
<MudTable Elevation="25" Items="stocks"> @*@bind-contact="stock">*@
    <ToolBarContent>
        <MudText Typo="Typo.h6">Green Bean Stock</MudText>
        @*<MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search for Stocks..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>*@
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Country</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Overall Price</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.GreenBeanInfo?.Name</MudTd>
        <MudTd DataLabel="Country">@context.GreenBeanInfo?.Country</MudTd>
        <MudTd DataLabel="Amount">@context.Amount</MudTd>
        <MudTd DataLabel="OverallPrice">@context.OverallPrice</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => Edit(@context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(() => Delete(@context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code { 
    private EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    bool beanloading => GreenBeansState.Value.Loading;

    bool edit => StocksState.Value.StockEditMode;
    private string ErrorText => StocksState.Value.ErrorMessage;
    private bool showInputDialog => StocksState.Value.ShowInputDialog;

    private GreenBeanInfo selectedGreenBean => StocksState.Value.SelectedGreenBeanInfo;
    private GreenBeanInfo[] greenbeaninfos => GreenBeansState.Value.GreenBeans;
    private Contact[] contacts => ContactsState.Value.Contacts;
    private Contact selectedContact => StocksState.Value.SelectedContact;
    private Stock stock => StocksState.Value.CurrentStock;
    private Stock[] stocks => StocksState.Value.Stocks;

    private void ContactChanged(Contact e)
    {
        Dispatcher.Dispatch(new SetSelectedContactAction(e));
    }

    private void ClickAddButton()
    {
        Dispatcher.Dispatch(new StocksAddAction());
    }

    // ensure that all data is loaded
    private void LoadData()
    {
        if (!ContactsState.Value.Initialized)
        {
            Dispatcher.Dispatch(new ContactsLoadAction());
        }
        if (!GreenBeansState.Value.Initialized)
        {
            Dispatcher.Dispatch(new GreenBeansLoadAction());
        }
        if (!StocksState.Value.Initialized)
        {
            Dispatcher.Dispatch(new StocksLoadAction());
        }
    }

    protected override void OnInitialized()
    {
        SubscribeToAction<StockDeleteSuccessAction>((action) => snackbar.Add("Stock deleted.", Severity.Success));
        SubscribeToAction<StockDeleteFailureAction>((action) => snackbar.Add($"Stock delete failed: {action.ErrorMessage}.", Severity.Error));
        SubscribeToAction<StockCreateSuccessAction>((action) => snackbar.Add("Stock created successfully.", Severity.Success));
        SubscribeToAction<StockCreateFailureAction>((action) => snackbar.Add($"Stock not created: {action.ErrorMessage}.", Severity.Error));
        SubscribeToAction<StockUpdateSuccessAction>((action) => snackbar.Add("Stock updated successfully.", Severity.Success));
        SubscribeToAction<StockUpdateFailureAction>((action) => snackbar.Add($"Stock update failed: {action.ErrorMessage}.", Severity.Error));
        LoadData();
        base.OnInitialized();
    }

    private void BeanSelectionChanged(GreenBeanInfo beanInfo)
    {
        Dispatcher.Dispatch(new SelectedGreenBeanChangeAction(beanInfo));
    }

    private void SaveGreenBean() { }

    private void Save()
    {
        Dispatcher.Dispatch(new StockSaveAction(selectedContact, selectedGreenBean, stock));
    }

    private void Edit(Stock st)
    {
        Dispatcher.Dispatch(new StockEditAction(st));
    }

    private void Delete(Stock st)
    {
        Dispatcher.Dispatch(new StockDeleteAction(st));
    }

    Func<Contact, string> converter = c => (c?.Id != 0) ? c.Name : "None";
}