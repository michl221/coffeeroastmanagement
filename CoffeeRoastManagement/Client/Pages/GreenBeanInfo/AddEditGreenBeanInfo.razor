@page "/greenbeaninfo"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackbar

<h3>Green Bean Management</h3>

<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@ToggleShowInputDialog"></MudIconButton>
@if (showInputDialog)
{
    <GreenBeanForm ButtonText="@ButtonAction" greenbeaninfo="greenbeaninfo" OnValidSubmit="@Save" />
}


<MudTable Elevation="25" Items="greenbeaninfos" Filter="new Func<GreenBeanInfo, bool>(Search)" @bind-contact="greenbeaninfo">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Green Beans</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Contacts..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Country</MudTh>
        <MudTh>Region</MudTh>
        <MudTh>Farmer</MudTh>
        <MudTh>Url</MudTh>
        <MudTh>Note</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name"><MudLink Href="@context.Url" Underline="Underline.Always">@context.Name</MudLink></MudTd>
        <MudTd DataLabel="Country">@context.Country</MudTd>
        <MudTd DataLabel="Region">@context.Region</MudTd>
        <MudTd DataLabel="Farmer">@context.Farmer</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private bool showInputDialog = false;
    private string ButtonAction = "Create";
    private string searchString = "";
    private GreenBeanInfo greenbeaninfo = new GreenBeanInfo();
    private List<GreenBeanInfo> greenbeaninfos = new List<GreenBeanInfo>();
    private bool edit = false;

    private void ToggleShowInputDialog()
    {
        if (edit && showInputDialog)
        {
            greenbeaninfo = new GreenBeanInfo();
            edit = false;
            ButtonAction = "Create";
            StateHasChanged();
            return;
        }
        showInputDialog = !showInputDialog;
    }

    private void ShowInputDialog()
    {
        showInputDialog = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var c = await http.GetFromJsonAsync<GreenBeanInfo[]>("api/greenbeaninfo");
        greenbeaninfos.Clear();
        greenbeaninfos.AddRange(c);
    }

    private bool Search(GreenBeanInfo greenbeaninfo)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (greenbeaninfo.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private async void Save()
    {
        if (greenbeaninfo.Id == 0)
        {
            await http.PostAsJsonAsync("api/greenbeaninfo", greenbeaninfo);
            snackbar.Add("Green bean information saved.", Severity.Success);
        }
        else
        {
            await http.PutAsJsonAsync("api/greenbeaninfo", greenbeaninfo);
            snackbar.Add("Green bean information updated.", Severity.Success);

        }
        var c = await http.GetFromJsonAsync<GreenBeanInfo[]>("api/greenbeaninfo");
        greenbeaninfo = new GreenBeanInfo();
        showInputDialog = false;
        edit = false;
        ButtonAction = "Create";
        greenbeaninfos.Clear();
        greenbeaninfos.AddRange(c);
        StateHasChanged();
    }

    private async void Edit(int id)
    {
        ButtonAction = "Update";
        edit = true;
        ShowInputDialog();
        greenbeaninfo = await http.GetFromJsonAsync<GreenBeanInfo>($"api/greenbeaninfo/{id}");
        StateHasChanged();
    }

    private async void Delete(int id)
    {
        showInputDialog = false;
        edit = false;
        greenbeaninfo = new GreenBeanInfo();
        await http.DeleteAsync($"api/greenbeaninfo/{id}");
        snackbar.Add("Green bean information deleted.", Severity.Success);
        var c = await http.GetFromJsonAsync<GreenBeanInfo[]>("api/greenbeaninfo");
        greenbeaninfos.Clear();
        greenbeaninfos.AddRange(c);
        StateHasChanged();
    }
}