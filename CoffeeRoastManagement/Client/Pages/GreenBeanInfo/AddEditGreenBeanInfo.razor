@page "/greenbeaninfo"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackbar
@inject IDispatcher Dispatcher
@inject IState<GreenBeansState> GreenBeansState

@using CoffeeRoastManagement.Client.Store.State
@using CoffeeRoastManagement.Client.Store.Features.EditGreenBean.Actions

@inherits FluxorComponent

<h3>Green Bean Management</h3>

<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@ClickAddButton"></MudIconButton>
@if (showInputDialog)
{
    <GreenBeanForm ButtonText="@ButtonAction" greenbeaninfo="greenbeaninfo" OnValidSubmit="@Save" />
}


<MudTable Elevation="25" Items="greenbeaninfos"> @*@bind-contact="greenbeaninfo">*@
    <ToolBarContent>
        <MudText Typo="Typo.h6">Green Beans</MudText>
        <MudToolBarSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Country</MudTh>
        <MudTh>Region</MudTh>
        <MudTh>Farmer</MudTh>
        <MudTh>Url</MudTh>
        <MudTh>Note</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name"><MudLink Href="@context.Url" Underline="Underline.Always">@context.Name</MudLink></MudTd>
        <MudTd DataLabel="Country">@context.Country</MudTd>
        <MudTd DataLabel="Region">@context.Region</MudTd>
        <MudTd DataLabel="Farmer">@context.Farmer</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => Edit(@context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(() => Delete(@context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>


@code { 

    private bool showInputDialog => GreenBeansState.Value.ShowInputDialog;
    private string ButtonAction => GreenBeansState.Value.GreenBeanButtonText;

    private GreenBeanInfo greenbeaninfo => GreenBeansState.Value.CurrentGreenBean;

    private GreenBeanInfo[] greenbeaninfos => GreenBeansState.Value.GreenBeans;
    private bool loading => GreenBeansState.Value.Loading;

    private bool edit => GreenBeansState.Value.GreenBeanEditMode;

    private void ClickAddButton()
    {
        Dispatcher.Dispatch(new GreenBeanAddAction());
    }

    private void LoadGreenBeans()
    {
        Dispatcher.Dispatch(new GreenBeansLoadAction());
    }

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<GreenBeansDeleteSuccessAction>((action) => snackbar.Add("Green bean deleted.", Severity.Success));
        SubscribeToAction<GreenBeansDeleteFailureAction>((action) => snackbar.Add($"Green been delete failed: {action.ErrorMessage}.", Severity.Error));
        SubscribeToAction<GreenBeanCreateSuccessAction>((action) => snackbar.Add("Green bean created successfully.", Severity.Success));
        SubscribeToAction<GreenBeanCreateFailureAction>((action) => snackbar.Add($"Green bean not created: {action.ErrorMessage}.", Severity.Error));
        SubscribeToAction<GreenBeanUpdateSuccessAction>((action) => snackbar.Add("Green bean updated successfully.", Severity.Success));
        SubscribeToAction<GreenBeanUpdateFailureAction>((action) => snackbar.Add($"Green bean update failed: {action.ErrorMessage}.", Severity.Error));

        if (!GreenBeansState.Value.Initialized)
        {
            LoadGreenBeans();
            Dispatcher.Dispatch(new GreenBeansInitializedAction());
        }
        await base.OnInitializedAsync();
    }

    private void Save()
    {
        Dispatcher.Dispatch(new GreenBeansSaveAction(greenbeaninfo));
    }

    private void Edit(GreenBeanInfo gbi)
    {
        Dispatcher.Dispatch(new GreenBeanEditAction(gbi));
    }

    private void Delete(GreenBeanInfo gbi)
    {
        Dispatcher.Dispatch(new GreenBeansDeleteAction(gbi));
    }
}